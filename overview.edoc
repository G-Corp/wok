@author Gregoire Lejeune <gregoire.lejeune@gmail.com>
@author Gregoire Lejeune <greg@g-corp.io>
@copyright 2015 Grégoire Lejeune, 2015 G-Corp
@version 0.0.1
@title Microservice framework for Erlang
@doc
<h3>Create a microservice with wok</h3>

<h4>Erlang</h4>

1. Add wok in your dependencies :

<pre>
{wok, ".*", {git, "git@gitlab.botsunit.com:msaas/wok.git", {branch, "master"}}}
</pre>

2. Create your services and routes.

3. Reference your services and routes in the <tt>config</tt> file (see <a href="#conf">Configuration</a>)

3. Start your service :

<pre>
application:ensure_all_started(wok).
</pre>

<h4>Elixir</h4>

<h4>Ruby</h4>

<h4>Python</h4>

<h4>Javascript</h4>

<a name="conf"></a><h3>Configuration</h3>

<ul>
<li><tt>messages :: list()</tt> : <a href="#messages_conf">Messages configuration</a></li>
<li><tt>rest :: list()</tt> : <a href="#rest_conf">REST configuration</a></li>
</ul>

<a name="messages_conf"></a><h4>Messages configuration</h4>

<ul>
<li><tt>handler :: atom()</tt> : handler used to create and parse messages. See <a href="https://gitlab.botsunit.com/msaas/wok_message_handler">wok_message_handler</a> for more informations.</li>
<li><tt>services :: list()</tt> : <a  href="#services_conf">Services configuration</a></li>
<li><tt>consumer_group :: binary()</tt> : Name of the Kafka' consumer group</li>
<li><tt>local_queue_name :: binary()</tt> : Name of the pipette' queue</li>
<li><tt>local_consumer_group :: binary()</tt> : Name of the pipette' consumer group</li>
<li><tt>max_services_fork :: integer()</tt> : Maximum number of messages in parallel</li>
<li><tt>topics :: list()</tt> : <a href="#topic_conf">Topics configuration</a></li>
</ul>

<a name="rest_conf"></a><h4>REST configuration</h4>

<ul>
<li><tt>port :: integer()</tt> : Port to use for the REST API (default: <tt>8080</tt>)</li>
<li><tt>ip :: list()</tt> : IP to use for the REST API (default: <tt>0.0.0.0</tt>)</li>
<li><tt>max_conn :: integer()</tt> : Max number of  connexions (default: <tt>100</tt>)</li>
<li><tt>routes :: list()</tt> : <a href="#routes_conf">Routes configuration</a></li>
</ul>

<a name="services_conf"></a><h4>Services configuration</h4>

<pre>
{&lt;&lt;"my_service"&gt;&gt;, {my_service_module, my_service_function}}
</pre>

<a name="topics_conf"></a><h4>Services configuration</h4>

<pre>
{&lt;&lt;"topic"&gt;&gt;, [{fetch_frequency, 5000}, {max_bytes, 10485760}]}
</pre>

<a name="routes_conf"></a><h4>Routes configuration</h4>

<pre>
{'GET', "/path", {route_module, route_function}}
</pre>

<h3>Dependencies</h3>

![](wok.deps.png)

<h3>Call tree</h3>

![](wok.call.png)

<h2>Start Kafka</h2>

Update <tt>docker-compose.yml</tt> and change <tt>KAFKA_ADVERTISED_HOST_NAME</tt> to the IP of your <tt>docker0</tt> interface.

<pre>
docker-compose up -d
kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 3 --topic test
kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 3 --topic repl
kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 3 --topic service
kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 3 --topic public
...
docker-compose stop
</pre>

<h3>Licence</h3>

Copyright (c) 2015 Grégoire Lejeune

Copyright (c) 2015 G-Corp

Unauthorized copying of this software, via any medium is strictly prohibited

Proprietary and confidential

