[
  {wok, [
    {messages, [
      {handler, {wok_default_message_handler, [{headers, #{compress => false}}]}},
      {controlers, [
        {<<"my_service/my_controler/my_action">>, {dummy_service_handler, my_action}},
        {<<"my_service/my_controler/my_async_action">>, {dummy_service_handler, my_async_action}},
        {<<"my_service/my_controler/my_answer">>, {dummy_service_handler, my_answer}},
        {<<"my_service/my_controler/:action/:id">>, {dummy_service_handler, parameterized_action}}
      ]},
      {consumer_group, <<"MyConsumer">>},
      % {consumer_group, {random, [{prefix, hello}]}},
      {topics, [
        % {topic name, options}
        {<<"test">>, [{max_bytes, 10485760}, {from_beginning, true}]},
        {<<"repl">>, [{fetch_frequency, 8000}, {max_bytes, 10485760}]},
        {<<"public">>, [{fetch_frequency, 5000}, {max_bytes, 10485760}]},
        {<<"service">>, [{fetch_frequency, 10000}, {max_bytes, 10485760}]}
      ]}
    ]}
  , {producer, [
      {handler, dummy_producer_handler},
      {frequency, 5000},
      {number_of_messages, 1000}
    ]}
  , {start, [
      {dummy_producer_handler, [], worker}
      % {dummy_supervisor, [], supervisor}
      % {dummy_app, permanent, application}
    ]}
  , {initializer, [
      {dummy_initializer, [dummy_initializer, state]}
    ]}
  , {middlewares, [
      {dummy_middleware, [
        no_default_namespace,
        {namespace, "/dummy"},
        {route, "/dummy_get", "/get_folks"},
        {http, [
          {only, ["*"]},
          {except, ["/ws", {"/my_service", ['GET']}]}
        ]},
        {init, [dummy_middleware, state]}
      ]}
    ]}
  , {plugins, [
      {dummy_plugin, [
        {foo, {'*', '*', [saturday, sunday, monday], '*', '*', '*/5'}},
        {bar, {'*', '*', '*', '*', '*', '*/5'}},
        {baz, {2020, 1, 1, 0, 0, 0}}
      ], [<<"test">>, 0]}
    ]}
  , {rest, [
      {port, 8080},
      {ip, "0.0.0.0"},
      {max_conn, 100},
      {routes, [
        {namespace, "/api", [
          % {resources, user, dummy_user_handler},
          {'GET', "/my_service", {dummy_service_handler, my_service_get}},
          {'GET', "/my_service2", {dummy_service_handler, my_service_get2}}
        ]},
        {'POST', "/my_service", {dummy_service_handler, my_service_post}},
        {'WS', "/ws", dummy_service_handler},
        {static, "/public", {priv_dir, wok, "static"}}
        % {static, "/public", {priv_dir, wok}}
        % {static, "/public", {dir, "/tmp/data"}}
      ]},
      {cors, [
        {'Access-Control-Allow-Methods', [<<"GET">>,
                                          <<"POST">>,
                                          <<"PUT">>,
                                          <<"HEAD">>,
                                          <<"OPTIONS">>,
                                          <<"DELETE">>]},
        {'Access-Control-Allow-Origin', <<"*">>},
        {'Access-Control-Expose-Headers', [<<"X-My-Custom-Header">>,
                                           <<"X-Another-Custom-Header">>]},
        {'Access-Control-Max-Age', 1728000},
        {'Access-Control-Allow-Credentials', true},
        {'Access-Control-Allow-Headers', [<<"Access-Control-Allow-Origin">>,
                                          <<"Authorization">>,
                                          <<"Origin">>,
                                          <<"x-requested-with">>,
                                          <<"Content-Type">>,
                                          <<"Content-Range">>,
                                          <<"Content-Disposition">>,
                                          <<"Content-Description">>]}
      ]}
    ]}
  ]},
  {kafe, [
    {brokers, [
      {"localhost", 9092},
      {"localhost", 9093},
      {"localhost", 9094}
    ]},
    {client_id, <<"kafe">>},
    {pool_size, 1},
    {chunk_pool_size, 2},
    {brokers_update_frequency, 10000},
    {api_version, 1},
    {correlation_id, 0},
    {socker, [
      {sndbuf, 4194304},
      {recbuf, 4194304},
      {buffer, 4194304}
    ]}
  ]},
  {lager, [
    {handlers, [
      {lager_console_backend, [info, {lager_default_formatter, [date, " ", time," [",severity,"] -- ", module, ":", function, " (", pid, "/", line, ") -- ", message, "\n"]}]},
      {lager_file_backend, [{file, "log/wok_error.log"}, {level, error}, {formatter, lager_json_formatter}]},
      {lager_file_backend, [{file, "log/wok_debug.log"}, {level, debug}, {formatter, lager_json_formatter}]},
      {lager_file_backend, [{file, "log/wok_console.log"}, {level, info}, {formatter, lager_json_formatter}]}
    ]}
  ]}
].
